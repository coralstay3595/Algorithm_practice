/**
  아래의 코드를 보고 말로 설명하는 연습하시오
  책을 보고 완벽히 이해하도록
**/

/** 패리티 계산하기
  2진수의 패리티는 1로 세팅된 비트의 개수와 같다
  1이 홀수 개이면 1, 짝수개이면 0이 된다
  이 패리티는 데이터를 저장하거나 네트워크로 통신을 할 떄 오류를 확인하는 용도로 사용된다

  Question
  64비트로 이루어진 숫자가 굉장히 많다면 패리티는 어떻게 계산해야 할까?
  **/


  /**
    Brute Force
  **/
  
  public static short parity(long x){
    short result = 0;
    
    while( x != 0 ){
    result ^= ( x & 1 );
    x >>>=1;
    }
  }
  
  /**
   O(n)시간 걸림

  Brute Force 개선 방법 첫 번째
  **/

  public static short parity(long x){
    short resutl = 0;
  
    while( x! = 0 ){
      result ^= 1;
      x &= (x -1);// x의 하위 비트를 지운다
    }
    
  return result;
  }

  /**
  다른 관점 2가지
  다른관점 2 가지 중 첫 번째
  **/
  
  public static short parity(long x) {
  final int WORD_SIZE = 16;
  final int BIT_MASK = 0xFFFF;
  return (short) (
  precomputedParity[(int)((x >>> (3 * WORD_SIZE)) & (BIT_MASK)] ^
  precomputedParity[(int)((x >>> (2 * WORD_SIZE))) & (BIT_MASK)] ^
  precomputedParity[(int)((x >>> WORD_SIZE)) & (BIT_MASK)] ^
  precomputedParity[(int)(x & BIT_MASK)];
  
  /**
  다른 관점 2가지
  다른관점 2 가지 중 두 번째
  **/

  public static short parity(long x) {
    x ^= x >>> 32;
    x ^= x >>> 16;
    x ^= x >>> 8;
    x ^= x >>> 2;
    x ^= x >>>1;

    return (short)(x & 0x1);
  }
